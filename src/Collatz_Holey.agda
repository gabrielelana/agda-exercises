module Collatz_Holey where

-- Collatz problem: model the famous Collatz sequence. The Collatz sequence for
-- a number `n` is the sequence of numbers generated by repeatedle aplying the
-- following operations until the number is equal to 1.

-- - If the number is even, divide it by two.
-- - If the number is odd, triple it and add one.

-- For further details see https://en.wikipedia.org/wiki/Collatz_conjecture

open import Data.Nat using (‚Ñï)

-- NOTE: since we are talking about evenness and oddness, you can use the
-- solutions from `EvenOrOdd` module

-- CHALLENGE: since the Collatz operations are not defined for zero, try to
-- explicitly encode that in your solution. TIP: you need to make to work only
-- on positive numbers. TIP: some of the signature below might need to change.

-- Define a single step of the Collatz sequence
collatzStep : ‚Ñï ‚Üí ‚Ñï
collatzStep = {!!}

-- Define "reaches 1" predicate
data Reaches1 : ‚Ñï ‚Üí Set where
  -- Your constructors here

-- Prove the correctness of `collatzStep` for the even case
-- Prove the correctness of `collatzStep` for the odd case

-- Prove small cases reach 1
reaches1-4 : Reaches1 4
reaches1-4 = {!!}

reaches1-5 : Reaches1 5
reaches1-5 = {!!}

reaches1-7 : Reaches1 7
reaches1-7 = {!!}

-- Since the Collatz conjecture is an open mathematical problem you are
-- dispensed to prove it üòÅ
