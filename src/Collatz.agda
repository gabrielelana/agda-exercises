module Collatz where

-- Collatz problem: model the famous Collatz sequence. The Collatz sequence for
-- a number `n` is the sequence of numbers generated by repeatedle aplying the
-- following operations until the number is equal to 1.

-- - If the number is even, divide it by two.
-- - If the number is odd, triple it and add one.

-- For further details see https://en.wikipedia.org/wiki/Collatz_conjecture

open import Data.Empty using (‚ä•; ‚ä•-elim)
open import Data.Unit using (‚ä§)
open import Relation.Binary.PropositionalEquality using (_‚â°_; refl; cong)
open import Data.Nat using (‚Ñï; zero; suc; _+_; _*_)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
open import EvenOrOdd using (evenOrOdd; evenOddDisjoint; Even; Odd; zero; one; step)
open import Data.Bool.Base using (Bool; true; false)

-- Divide by 2 even numbers exploiting their evenness
_/2 : {n : ‚Ñï} ‚Üí Even n ‚Üí ‚Ñï
zero /2 = zero
step x /2 = suc (x /2)

-- Check that `6 / 2 = 3`
_ : (step (step (step zero))) /2 ‚â° 3
_ = refl

-- Simple way to represent positive natural numbers. With that we can implicitly
-- constraint a number to be positive (as a matter of fact, I should say, to
-- exclude zero)
Positive : ‚Ñï -> Set
Positive zero = ‚ä•
Positive _    = ‚ä§

-- Define a single step of Collatz sequence
collatzStep : (n : ‚Ñï) ‚Üí {_ : Positive n} ‚Üí ‚Ñï
collatzStep n with evenOrOdd n
... | inj‚ÇÅ even = even /2
... | inj‚ÇÇ odd = (n * 3) + 1

-- Prove the correctness of `collatzStep` for the even case
collatzStep-even : ‚àÄ {n : ‚Ñï} {p : Positive n} ‚Üí (e : Even n) ‚Üí collatzStep n {p} ‚â° e /2
collatzStep-even {n} {p} e with evenOrOdd n
... | inj‚ÇÅ e' = cong _/2 (even-unique e' e)
  where
    even-unique : ‚àÄ {n} ‚Üí (e‚ÇÅ : Even n) ‚Üí (e‚ÇÇ : Even n) ‚Üí e‚ÇÅ ‚â° e‚ÇÇ
    even-unique zero zero = refl
    even-unique (step e‚ÇÅ) (step e‚ÇÇ) = cong step (even-unique e‚ÇÅ e‚ÇÇ)
... | inj‚ÇÇ o = ‚ä•-elim (evenOddDisjoint n e o)  -- Contradiction!

-- Prove the correctness of `collatzStep` for the odd case
collatzStep-odd : ‚àÄ {n : ‚Ñï} {p : Positive n} ‚Üí Odd n ‚Üí collatzStep n {p} ‚â° n * 3 + 1
collatzStep-odd {n} {p} o with evenOrOdd n
... | inj‚ÇÅ e = ‚ä•-elim (evenOddDisjoint n e o)
... | inj‚ÇÇ o' = refl

-- Nice syntax to represent a sequence
infixr 4 _followedBy_
data Reaches1 : ‚Ñï ‚Üí Set where
  one : Reaches1 1
  _followedBy_ : (n : ‚Ñï) {p : Positive n} ‚Üí (Reaches1 (collatzStep n {p})) ‚Üí Reaches1 n

-- Prove that zero is not part of the Collatz sequence
zero-does-not-reach-1 : Reaches1 0 ‚Üí ‚ä•
zero-does-not-reach-1 (_followedBy_ _ {p} _) = p

-- Prove that 4 will reach 1
reaches1-4 : Reaches1 4
reaches1-4 = 4 followedBy 2 followedBy one

-- Prove that 5 will reach 1
reaches1-5 : Reaches1 5
reaches1-5 = 5 followedBy 16 followedBy 8 followedBy reaches1-4

-- Prove that 7 will reach 1
reaches1-7 : Reaches1 7
reaches1-7 = 7 followedBy
             22 followedBy
             11 followedBy
             34 followedBy
             17 followedBy
             52 followedBy
             26 followedBy
             13 followedBy
             40 followedBy
             20 followedBy
             10 followedBy
             5 followedBy
             16 followedBy
             8 followedBy
             reaches1-4

-- Since the Collatz conjecture is an open mathematical problem you are
-- dispensed to prove it üòÅ
